{
    "collab_server" : "",
    "contents" : "runWalds <-\n  . %>% {\n    panel <- .\n    dplyr::select(panel, variable) %>%\n      distinct %>% {\n        list(\n          filter(., str_detect(variable, 'sales') | variable %in% c('(Intercept)', 'age', 'age.sq')),\n          filter(., str_detect(variable, 'firm')),\n          filter(., str_detect(variable, 'class')),\n          filter(., str_detect(variable, 'part'))\n        )\n      } %>% \n      llply( function(l){\n        my.cov <-\n          inner_join(panel, l) %>%\n          daply('samp', function(s){\n            s %>%\n              arrange(variable) %>%\n              dplyr::select(delta) %>% \n              unlist\n          }) %>%\n          cov\n        \n        my.param <-\n          inner_join(panel, l) %>%\n          filter(samp == 1) %>%\n          arrange(variable) %>%\n          dplyr::select(delta) %>% \n          unlist\n        \n        list(\n          l, \n          chi.sqr = \n            pchisq(\n              q = my.param %*% solve(my.cov, my.param),\n              df = inner_join(panel, l) %>% dplyr::select(variable) %>% distinct %>% nrow\n            ) \n        )\n      })\n  }\n\n######DC.g vs RC.g Wald tests\nd %>% \n  filter(agent == 'Goverment') %>%\n  mutate(\n    variable = ifelse(\n      variable == '(Intercept)', \n      'RC.g:(Intercept)',\n      variable\n    ),\n    variable = ifelse(\n      variable == 'DC.g', \n      '(Intercept):DC.g',\n      variable\n    )\n  ) %>% \n  filter(\n    str_detect(variable, 'DC.g') |\n      str_detect(variable, 'RC.g')\n  ) %>% \n  mutate(\n    class = str_detect(variable, 'RC.g:'),\n    variable = str_replace(variable, 'RC.g:', replacement = ''),\n    variable = str_replace(variable, ':DC.g', replacement = '')\n  ) %>% \n  dcast(... ~ `class`) %>% \n  mutate(delta = `TRUE` - `FALSE`) %>%\n  runWalds\n\n#######RC.g, DC.g t tests\nd %>%\n  filter(agent == 'Goverment') %>%\n  mutate(\n    variable = ifelse(\n      variable == '(Intercept)' & agent == 'Goverment', \n      'RC.g:(Intercept)',\n      variable\n    ),\n    variable = ifelse(\n      variable == 'DC.g', \n      '(Intercept):DC.g',\n      variable\n    )\n  ) %>% \n  filter(\n    str_detect(variable, 'DC.g') |\n      str_detect(variable, 'RC.g')\n  ) %>% \n  mutate(\n    class = str_detect(variable, 'RC.g:'),\n    variable = str_replace(variable, 'RC.g:', replacement = ''),\n    variable = str_replace(variable, ':DC.g', replacement = '')\n  ) %>% \n  dcast(... ~ class) %>% \n  mutate(delta = `TRUE` - `FALSE`) %>% {\n    inner_join(\n      filter(., samp == 1),\n      gb(., variable) %>%\n        sm(sde = sd(delta))\n    )\n  } %>% \n  mutate(t = delta / sde) %>% \n  arrange(t)\n\n\n######DC.m vs RC.m Wald tests\nd %>% \n  filter(agent == 'Manufacturer') %>%\n  mutate(\n    variable = ifelse(\n      variable == '(Intercept)', \n      'RC.m:(Intercept)',\n      variable\n    ),\n    variable = ifelse(\n      variable == 'DC.m', \n      '(Intercept):DC.m',\n      variable\n    )\n  ) %>% \n  filter(\n    str_detect(variable, 'DC.m') |\n      str_detect(variable, 'RC.m')\n  ) %>% \n  mutate(\n    class = str_detect(variable, 'RC.m:'),\n    variable = str_replace(variable, 'RC.m:', replacement = ''),\n    variable = str_replace(variable, ':DC.m', replacement = '')\n  ) %>% \n  dcast(... ~ `class`) %>% \n  mutate(delta = `TRUE` - `FALSE`) %>%\n  runWalds\n\n#######RC.m, DC.m t tests\nd %>%\n  filter(agent == 'Manufacturer') %>%\n  mutate(\n    variable = ifelse(\n      variable == '(Intercept)' & agent == 'Manufacturer', \n      'RC.m:(Intercept)',\n      variable\n    ),\n    variable = ifelse(\n      variable == 'DC.m', \n      '(Intercept):DC.m',\n      variable\n    )\n  ) %>% \n  filter(\n    str_detect(variable, 'DC.m') |\n      str_detect(variable, 'RC.m')\n  ) %>% \n  mutate(\n    class = str_detect(variable, 'RC.m:'),\n    variable = str_replace(variable, 'RC.m:', replacement = ''),\n    variable = str_replace(variable, ':DC.m', replacement = '')\n  ) %>% \n  dcast(... ~ class) %>% \n  mutate(delta = `TRUE` - `FALSE`) %>% {\n    inner_join(\n      filter(., samp == 1),\n      gb(., variable) %>%\n        sm(sde = sd(delta))\n    )\n  } %>% \n  mutate(t = delta / sde) %>% \n  arrange(t)\n\n######RC.m vs RC.g Wald tests\nd %>% \n  filter() %>%\n  mutate(\n    variable = ifelse(\n      variable == '(Intercept)' & agent == 'Manufacturer', \n      'RC.m:(Intercept)',\n      variable\n    ),\n    variable = ifelse(\n      variable == '(Intercept)' & agent == 'Goverment', \n      'RC.g:(Intercept)',\n      variable\n    )\n  ) %>% \n  filter(\n    str_detect(variable, 'RC.m') |\n      str_detect(variable, 'RC.g')\n  ) %>% \n  mutate(\n    variable = str_replace(variable, 'RC.m:', replacement = ''),\n    variable = str_replace(variable, 'RC.g:', replacement = '')\n  ) %>% \n  dcast(... ~ agent) %>% \n  mutate(delta = Manufacturer - Goverment) %>%\n  runWalds\n\n#######RC.m, RC.g t tests\nd %>%\n  mutate(\n    variable = ifelse(\n      variable == '(Intercept)' & agent == 'Manufacturer', \n      'RC.m:(Intercept)',\n      variable\n    ),\n    variable = ifelse(\n      variable == '(Intercept)' & agent == 'Goverment', \n      'RC.g:(Intercept)',\n      variable\n    )\n  ) %>% \n  filter(\n    str_detect(variable, 'RC.m') |\n      str_detect(variable, 'RC.g')\n  ) %>% \n  mutate(\n    variable = str_replace(variable, 'RC.m:', replacement = ''),\n    variable = str_replace(variable, 'RC.g:', replacement = '')\n  ) %>% \n  dcast(... ~ agent) %>%\n  mutate(delta = Manufacturer - Goverment) %>% {\n    inner_join(\n      filter(., samp == 1),\n      gb(., variable) %>%\n        sm(sde = sd(delta))\n    )\n  } %>% \n  mutate(t = delta / sde) %>% \n  arrange(t)\n",
    "created" : 1465586804422.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3439149883",
    "id" : "870C9C5E",
    "lastKnownWriteTime" : 1465657058,
    "last_content_update" : 1465657058782,
    "path" : "~/Dropbox/code/recalls/wald_tests/wald.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled5"
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}