{
    "collab_server" : "",
    "contents" : "source('modules/Classes/Transition.R')\nsource('modules/Classes/PayoffFunction.R')\n\nDPEngine <- \n  setRefClass(\n    'DPEngine',\n    fields = list(\n      iter.stop.threshold = 'numeric',\n      beta = 'numeric',\n      tran = 'Transition',\n      payoff = 'PayoffFunction',\n      CCP = 'data.frame',\n      value.fn = 'data.frame',\n      value.fn.saved = 'data.frame', #Last \"saved\" value function\n      choice.specific.value = 'data.frame',\n      panel = 'data.frame',\n      theta = 'data.frame'\n    ),\n    methods = list(\n      initializeDP = function(state.space, panel){\n        tran <<-\n          Transition$new(state.space = state.space) %T>% {\n            .$initialize_trans(panel = panel)\n          }\n        \n        payoff <<-\n          PayoffFunction$new() %T>% {\n            .$calcPayoffStatistics(tran = tran) \n          }\n        \n        value.fn <<- \n          tran$state.space$state.space %>% \n          mt(value = 0)\n        \n        value.fn.saved <<- value.fn\n        \n        CCP <<- #set all CCPs  1/num.actions\n          tran$state.space$state.action.space %>% \n          mt(CCP = 1/n_distinct(order.q))\n        \n        setTheta(c(rexp(1, .1), rexp(1, 1), rexp(1, 20)))\n      },\n      \n      updateChoiceSpecificValue = function(){\n        #Reads: payoff, tran, value.fn\n        #Writes: choice.specific.value\n        choice.specific.value <<-\n          ij(\n            payoff$utility,\n            value.fn,\n            by = c('inv.i', 'inv.I', 'mean.m')\n          ) %>% \n          dd('ship.s', function(s){\n            s %>% \n              ag(inv.i, inv.I, mean.m) %>% \n              mt(\n                future.value = c(tran$tran.mat[[as.character(s$ship.s[1])]] %*% value),\n                csv = payoff + beta * future.value\n              )\n          }) %>% \n          sl(-c(payoff, value, future.value))\n      },\n      \n      updateValueFunction = function(use.val.shape = FALSE){\n        #Reads: choice.specific.value, tran$dist.u, \n        #Writes: value.fn\n        value.fn <<-\n          choice.specific.value %>% \n          gb(inv.i, inv.I, mean.m) %>% \n          sm(\n            no.shipment.util = first(csv),\n            shipment.util = min(csv)-log(sum(exp(min(csv)-csv)))\n          ) %>% \n          ij(\n            tran$dist.u,\n            by = c('inv.I')\n          ) %>%\n          mt(value = (1 - prob.u) * no.shipment.util + prob.u * shipment.util) %>% \n          sl(-c(no.shipment.util, shipment.util, prob.u)) %>% \n          ad\n      },\n      \n      delevelValueFunction = function() {\n        value.fn <<- \n          value.fn %>%\n          mt(value = value - first(value))\n      },\n      \n      runRelativeValueIteration = function(num.step.limit = Inf, iter.stop.threshold = 10^-8) {\n        delta <- 1\n        iter <- 0\n        while((delta > iter.stop.threshold) & (iter < num.step.limit)){\n          print(delta)\n          value.fn.prior <- value.fn\n          updateChoiceSpecificValue()\n          updateValueFunction()\n          delevelValueFunction()\n          delta <- max(abs(value.fn.prior$value - value.fn$value))\n          iter <- iter + 1\n        }\n        updateCCPs()\n      },\n      \n      updateCCPs = function(){\n        #Reads: choice.specific.value\n        #Writes: CCP\n        CCP <<- \n          choice.specific.value %>% \n          rn(order.q = ship.s) %>% \n          gb(inv.i, inv.I, mean.m) %>% \n          mt(\n            csv = csv - min(csv),\n            CCP = exp(-csv)/sum(exp(-csv)),\n            CCP = pmax(CCP, 10^-50)\n          ) %>% \n          ug %>% \n          sl(-csv)\n      },\n      \n      evaluateLikelihood = function(){\n        ij(\n          CCP, \n          panel,\n          by = c('inv.i', 'inv.I', 'mean.m', 'order.q')\n        ) %>% \n          sm(likelihood = weighted.mean(log(CCP), w = obs.weight))\n      },\n      \n      runSNFXP = function(panel) {\n        panel <<- panel\n        theta %>% \n          un %>% \n          optim(  \n            par = .,\n            method = 'L-BFGS-B',\n            lower = rep(0, 3),\n            control = list(fnscale=-1, factr = 10^-6),\n            fn = function(param){\n              setTheta(param)\n              print(theta)\n              runRelativeValueIteration()\n              evaluateLikelihood()\n            }\n          ) %>% {\n            setTheta(.$par)\n          }\n        \n        runRelativeValueIteration() #Final run to save correct CCPs\n      },\n      \n      runSNPL = function(panel) {\n        panel <<- panel\n        delta = 1\n        while(delta > 10^-6){\n          value.fn.prior <- value.fn.saved$value\n          theta %>%\n            un %>% \n            optim(  \n              par = .,\n              method = 'L-BFGS-B',\n              lower = rep(0, 3),\n              control = list(fnscale=-1, factr = 10^-7),\n              fn = function(param){\n                setTheta(param)\n                print(theta)\n                value.fn <<- value.fn.saved\n                runRelativeValueIteration(num.step.limit = 50)\n                evaluateLikelihood()\n              }\n            ) %>% {\n              setTheta(.$par)\n              runRelativeValueIteration()\n              value.fn.saved <<- value.fn\n              print(tl(value.fn))\n            }\n          delta <- max(abs(value.fn.prior - dp$value.fn.saved$value))\n        }\n      },\n      \n      setTheta = function(par){\n        #Reads: par (Type: numeric)\n        #Outputs: data.frame\n        theta <<-\n          par %>%\n          rbind %>%\n          ad %>% \n          setNames(., c('lambda', 'mu', 'eta'))\n        \n        payoff$updatePayoffs(theta)\n      }\n    )\n  )",
    "created" : 1483058515835.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "2679303139",
    "id" : "B4D50C0C",
    "lastKnownWriteTime" : 1470587849,
    "last_content_update" : 1483058541175,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}