x%>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}]
}
x%>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}]
} %>%
projection
x%>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}]
} %>%
projection(active = ncol(.))
%>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] #Get linearly indepenent cols
} %>% #projection matrix onto those columns
projection(active = ncol(.)) -> proj
x%>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] #Get linearly indepenent cols
} %>% #projection matrix onto those columns
projection(active = ncol(.)) -> proj
x
proj %*% x
x %*% proj
x
x
proj %*% x
x %>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] #Get linearly indepenent cols
}
x
x %>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] #Get linearly indepenent cols
} %>% #projection matrix onto those columns
projection(active = seq(ncol(.)))
x %>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] #Get linearly indepenent cols
} %>% #projection matrix onto those columns
projection(active = seq(ncol(.))) -> proj
proj %*% x
x
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$CCP
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
value.fn
projection.mat %*% value.fn
value.fn
value.fn %>% cbind
projection.mat %*% value.fn
value.fn %>% cbind - projection.mat %*% value.fn
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$CCP
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$CCP
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
projection.mat %*% (arvind$tran$tran.mat[[2]]-arvind$tran$tran.mat[[1]]j)
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$CCP
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$CCP
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
warnings()
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$CCP
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
projection.mat %*% (tran$tran.mat[[2]]-tran$tran.mat[[1]])
(tran$tran.mat[[2]]-tran$tran.mat[[1]])
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$value.fn
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y %*% value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y %*% arvind$value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y %*% arvind$value.fn
)
arvind$payoff$utility
arvind$tran$tran.mat
arvind$value.fn
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y %*% arvind$value.fn
)
beta = .9999
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y %*% arvind$value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
arvind$CCP
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y %*% projection.mat %*% arvind$value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y %*% arvind$projection.mat %*% arvind$value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
arvind$CCP
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * arvind$projection.mat %*% .y %*% arvind$value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
arvind$CCP
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ arvind$projection.mat %*% .x + beta * arvind$projection.mat %*% .y %*% arvind$value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * arvind$projection.mat %*% .y %*% arvind$value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta *  .y %*% arvind$value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y %*% arvind$value.fn
)
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y  %*% arvind$projection.mat %*%arvind$value.fn
)
1.3391393--0.007376978
1.1526844 - 0.1790778
1.1526844 + 0.1790778
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * arvind$projection.mat %*%  .y  %*% arvind$value.fn
)
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y  %*% arvind$value.fn
)
arvind$projection.mat %*%  arvind$tran$tran.mat[[1]]
arvind$tran$tran.mat[[1]]
arvind$projection.mat
arvind$projection.mat %>% zapsmall
arvind$value.fn
arvind$projection.mat %*% arvind$value.fn
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$CCP
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$CCP
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
value.fn %>% cbind
projection.mat %*% value.fn
(projection.mat %*% value.fn) %>% sum
projection.mat
projection.mat %>% rowSums
projection.mat %>% colSums
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
projection.mat <<-
(tran$tran.mat[[2]]-tran$tran.mat[[1]]) %>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] #Linearly indepenent cols
} %>% #projection matrix onto these columns
projection(active = seq(ncol(.)))
projection.mat
projection.mat %>% seq(1, 10)
projection.mat %*% seq(1, 10)
(tran$tran.mat[[2]]-tran$tran.mat[[1]]) %>% qr
(tran$tran.mat[[2]]-tran$tran.mat[[1]]) %>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] }
(tran$tran.mat[[2]]-tran$tran.mat[[1]]) ->>x
x
x
rowSums(x)
x%>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] #Linearly indepenent cols
} ->y
y
rowSums(y)
x %*% y
x
x%>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] #Linearly indepenent cols
} %>% #projection matrix onto these columns
projection(active = seq(ncol(.))) ->y
rowSums(y)
x %*% y
x
y %*% x
x
x %>%
t %>% {
.[, qr(.) %>% {.$pivot[seq(.$rank)]}] #Linearly indepenent cols
} %>% #projection matrix onto these columns
projection(active = seq(ncol(.))) ->y
y
rowSums(y)
x
x %*% y
x
y %*% seq(10)
seq(10)-mean(seq(10))
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$CCP
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$solve_DP_shape(rep(1, 3))
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
source('~/Dropbox/code/victor/code/modules/Classes/ArvindSim.R')
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind <<-
ArvindSim$new(
beta = .9999,
num.states = 10,
dirichlet.alpha = .5
) %T>% {
.$initializeDP()
}
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
arvind$resetSystem()
arvind$useResidMatrix()
arvind$solve_DP_shape(rep(1, 3))
arvind$CCP
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ .x + beta * .y  %*% arvind$value.fn
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
map2(
arvind$payoff$utility,
arvind$tran$tran.mat,
~ (.x + beta * .y  %*% arvind$projection.mat %*% arvind$value.fn)
) %>% {
max.CSV <- Reduce(pmax, .)
map(., ~ . - max.CSV)
} %>%
map(~ exp(.)) %>% {
denominator <-
Reduce('+', .)
map(., ~ c(./denominator))
} %>%
map(~ pmax(10^-100, .))
arvind$projection.mat %*% arvind$tran$tran.mat[[1]]
arvind$tran$tran.mat[[1]] %*% arvind$projection.mat
arvind$projection.mat %*% arvind$tran$tran.mat[[1]] %*% arvind$projection.mat
