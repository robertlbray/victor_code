dp$resetSystem()
dp$solveDP(theta$true, value.iteration = FALSE)
value2 <- dp$value.fn
ccp2 <- dp$CCP
all.equal(ccp1, ccp2)
all.equal(value1, value2)
beta = .999
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
dp$value.fn
value1 <- dp$value.fn
ccp1 <- dp$CCP
dp$resetSystem()
dp$solveDP(theta$true, value.iteration = FALSE)
value2 <- dp$value.fn
ccp2 <- dp$CCP
all.equal(ccp1, ccp2)
all.equal(value1, value2)
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
dp$value.fn
value1 <- dp$value.fn
ccp1 <- dp$CCP
dp$resetSystem()
dp$solveDP(theta$true, value.iteration = FALSE)
value2 <- dp$value.fn
ccp2 <- dp$CCP
all.equal(ccp1, ccp2)
all.equal(value1, value2)
beta = .9999
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
dp$value.fn
value1 <- dp$value.fn
ccp1 <- dp$CCP
dp$resetSystem()
dp$solveDP(theta$true, value.iteration = FALSE)
value2 <- dp$value.fn
ccp2 <- dp$CCP
all.equal(ccp1, ccp2)
all.equal(value1, value2)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
beta = .999
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
dp$value.fn
value1 <- dp$value.fn
ccp1 <- dp$CCP
dp$resetSystem()
dp$solveDP(theta$true, value.iteration = FALSE)
value2 <- dp$value.fn
ccp2 <- dp$CCP
all.equal(ccp1, ccp2)
all.equal(value1, value2)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
dp$value.fn
value1 <- dp$value.fn
ccp1 <- dp$CCP
dp$resetSystem()
dp$solveDP(theta$true, value.iteration = FALSE)
value2 <- dp$value.fn
ccp2 <- dp$CCP
all.equal(ccp1, ccp2)
all.equal(value1, value2)
dp$resetSystem()
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
6.413886e-11/2.281705e-10
1.978255e-10/2.54625e-10
beta = .999
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
dp$resetSystem()
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
1.09783e-12/1.458403e-12
1.936853e-12/ 2.573358e-12
3.416781e-12/4.540548e-12
4.540548e-12/6.02781e-12
1.8761e-11/2.491846e-11
1.029898e-10/1.367849e-10
num.states
num.actions
num.theta
beta
num.actions = 10
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
1.623618e-12/3.310047e-12
6.737638e-12/1.370687e-11
2.791123e-11/5.683232e-11
beta = .9999
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
beta = .9
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
beta = .9999
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
3.359113e-11/1.711774e-10
1.711774e-10/4.381284e-10
8.337109e-12/ 3.359113e-11
beta = .99
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
1.449908e-10/1.470625e-10
9.063528e-12/1.07338e-11
3.070016e-12
/9.063528e-12
3.070016e-12/9.063528e-12
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
dp$deltas %>% plot
dp$deltas %>%
ad
dp$deltas %>%
ad %>%
mt(ratio = `.`/lag(`.`))
dp$deltas %>%
ad %>%
mt(ratio = `.`/lag(`.`)) %>%
sl(ratio) %>%
plot
dp$deltas %>%
ad %>%
mt(
n = row_number()
ratio = `.`/lag(`.`)
) %>%
sl(n, ratio) %>%
plot
dp$deltas %>%
ad %>%
mt(
n = row_number(),
ratio = `.`/lag(`.`)
) %>%
sl(n, ratio) %>%
plot
num.states = 1000
beta
beta=.9999
num.actions = 2
num.theta = 1
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
dp$deltas %>%
ad %>%
mt(
n = row_number(),
ratio = `.`/lag(`.`)
) %>%
sl(n, ratio) %>%
plot
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
num.actions
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
payoff$utility
num.actions
num.theta
tran$tran.mat %>% length
payoff$utility %>% length
source('~/Dropbox/code/victor/code/modules/Classes/PayoffFunction.R')
num.states = 10
source('~/Dropbox/code/victor/code/modules/Classes/PayoffFunction.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
source('~/Dropbox/code/victor/code/modules/Classes/PayoffFunction.R')
source('~/Dropbox/code/victor/code/modules/Classes/DPEngine.R')
source('~/Dropbox/code/victor/code/modules/Classes/Estimators.R')
dp <<-
DPEngine$new(
beta = beta,
iter.stop.threshold = iter.stop.threshold,
num.states = num.states,
num.actions = num.actions,
num.theta = num.theta,
dirichlet.alpha = dirichlet.alpha
) %T>% {
.$initializePolIter()
}
dp$solveDP(theta$true)
