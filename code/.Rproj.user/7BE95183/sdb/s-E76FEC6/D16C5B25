{
    "collab_server" : "",
    "contents" : "consolidateResults <- function() {\n  dir(experimentSave, recursive = TRUE) %>%\n    map(~ le(., loc = experimentSave)) %>%\n    ld(function(l){\n      rbind(\n        l$theta %>%\n          ld(function(m) max(abs(m - l$theta$true))) %>%\n          rn(\n            estimator = .id,\n            error = V1\n          ) %>%\n          ml('estimator') %>%\n          fl(estimator != 'true'),\n        l$times %>% \n          ld(function(m) m[1]) %>%\n          rn(\n            estimator = .id,\n            time = user.self\n          ) %>%\n          ml('estimator')\n      ) %>%\n        cbind(l$experiment)\n    }) %>%\n    se('experiments.rds')\n}\n\ntabErrors <- function() {\n  le('experiments.rds') %>% \n    fl(variable == 'error') %>% \n    dc(\n      random.seed ~ estimator, \n      value.var = 'value'\n    ) %>%\n    fl(!is.na(NNFXP + NNPL + NPL)) %>% \n    mt(large.prob = is.na(NFXP)) %>% \n    ml(c('random.seed', 'large.prob')) %>%\n    na.omit %>%\n    dd(\n      c('large.prob', 'variable'), \n      function(s){\n        quantile(s$value, probs = c(.1, .25, .5, .75, .9)) %>%\n          ad %>% \n          add_rownames\n      }\n    ) %>% \n    mt(\n      rowname = str_replace(rowname, '%', '\\\\\\\\%'),\n      large.prob = setLevels(\n        large.prob, \n        c('FALSE', 'TRUE'),\n        c('Fewer Than 3,000 States', ' More Than 3,000 States')\n      ),\n      variable = setLevels(\n        variable,\n        c('NFXP', 'NNFXP', 'NPL', 'NNPL'),\n        c('NFXP', 'SNFXP', 'NPL', 'SNPL')\n      )\n    ) %>% \n    make.table( \n      d = .,\n      formula = variable ~ large.prob + rowname,\n      value = '.',\n      table.type = 'Summary', \n      out.file = paste0(data.out, 'tables/estimateErrors.tex'), \n      hline = TRUE,\n      round.digits = 5,\n      nsmall = 5,\n      align.cols = 'lccccc|ccccc'\n    )\n}\n\nplotMispecifiedBeta <- function() {\n  dir(mispecificationSave) %>%\n    map(~ le(., loc = mispecificationSave)) %>%\n    map_df(~ cbind(\n      .$experiment, \n      error = max(abs(.$theta$true - .$theta$SNPL)))\n    ) %>%\n    mt(beta.real = setLevels(\n      beta.real,\n      c(.99, 1.01),\n      paste('Actual Discount Factor:', c(.99, 1.01))\n    ),\n    error = wins(error, c(0, .95))\n    ) %>% {\n      ggplot(\n        data = ., \n        aes(x = num.obs, y = error, colour = as.factor(beta.used))\n      ) + \n        geom_point(size = .75) +\n        geom_smooth(size = .75, se = FALSE) +\n        facet_wrap(~ beta.real) +\n        labs(\n          x = 'Number of Observations',\n          y = 'Estimation Error'\n        ) +\n        scale_colour_grey(start = 0, end = .8, name = 'Calibrated\\nDiscount\\nFactor') +\n        theme(\n          strip.text.x=element_text(size=13.5),\n          strip.text.y=element_text(size=13.5),\n          axis.title.x=element_text(size=15),\n          axis.title.y=element_text(size=15),\n          axis.text.x=element_text(size=12),\n          axis.text.y=element_text(size=12),\n          legend.title=element_text(size=15),\n          legend.text=element_text(size=13.5),\n          panel.grid.major = element_blank(), \n          panel.grid.minor = element_blank(),\n          panel.background=element_rect(fill='white', colour='black'),\n          strip.background = element_rect(colour=\"white\", fill=\"white\"),\n          panel.margin.x = grid::unit(.5, \"cm\")\n        )\n    } %>% \n    ggsave(plot = ., filename = p0(data.out, \"plots/misspecification.pdf\"), width=9, height=6)\n}\n\nplotMemoryRequirements <- function() {\n  paste0(data.loc, 'intermediate/memoryExperiments/memory.csv') %>%\n    read_csv %>%\n    mt(\n      States = 1000 * States,\n      Estimator = setLevels(\n        Estimator, \n        c('NPL', 'NNPL'),\n        c('NPL', 'SNPL')\n      )\n    ) %>% {\n      ggplot(\n        data = ., \n        aes(x = States, y = GiB, colour = Estimator)\n      ) + \n        geom_line(size = .75) +\n        labs(\n          x = 'Number of States',\n          y = 'GiB of Memory'\n        ) +\n        scale_colour_grey(start = .7, end = 0) +\n        theme(\n          strip.text.x=element_text(size=13.5),\n          strip.text.y=element_text(size=13.5),\n          axis.title.x=element_text(size=15),\n          axis.title.y=element_text(size=15),\n          axis.text.x=element_text(size=12),\n          axis.text.y=element_text(size=12),\n          legend.title=element_text(size=0),\n          legend.text=element_text(size=13.5),\n          panel.grid.major = element_blank(), \n          panel.grid.minor = element_blank(),\n          panel.background=element_rect(fill='white', colour='black'),\n          strip.background = element_rect(colour=\"white\", fill=\"white\"),\n          panel.margin.x = grid::unit(.5, \"cm\"),\n          legend.position = 'top'\n        )\n    } %>% \n    ggsave(plot = ., filename = p0(data.out, \"plots/memory.pdf\"), width=5, height=4)\n}\n\nplotCounterfactuals <- function() {\n  dir(counterfactualSave, recursive = TRUE) %>%\n    map_df(\n      ~ le(., loc = counterfactualSave) %>% {\n        merge(\n          .$experiment,\n          df(\n            full.time = ifelse(is.null(.$times$dp_full_solution[[1]]), NA, .$times$dp_full_solution[[1]]), \n            shape.time = .$times$dp_shape_solution[[1]]\n          )\n        )\n      }\n    ) %>%\n    ml(measure.vars = c('full.time', 'shape.time')) %>%\n    na.omit %>%\n    mt(\n      value = value / 60,\n      num.actions = setLevels(num.actions, c(2, 6), c('Two Actions', 'Six Actions')),\n      dirichlet.alpha = setLevels(dirichlet.alpha, c(.01, 1), c('Sparse Matrix', 'Dense Matrix')),\n      variable = setLevels(\n        variable,\n        c('full.time', 'shape.time'),\n        c('Without Strong Convergence', 'With Strong Convergence')\n      )\n    ) %>% {\n      ggplot(\n        data = ., \n        aes(x = num.states, y = value, colour = variable)\n      ) + \n        geom_point(size = .75) +\n        geom_smooth(size = .75, se = FALSE) +\n        geom_hline(yintercept = 0, colour = 'black', size = .25) +\n        facet_wrap(~ num.actions + dirichlet.alpha, nrow = 1 ) +\n        labs(\n          x = 'Number of States',\n          y = 'Number of Minutes'\n        ) +\n        scale_colour_grey(start = .7, end = 0) +\n        scale_x_continuous(breaks = c(0, 25000, 50000)) +\n        theme(\n          strip.text.x=element_text(size=13.5),\n          strip.text.y=element_text(size=13.5),\n          axis.title.x=element_text(size=15),\n          axis.title.y=element_text(size=15),\n          axis.text.x=element_text(size=12),\n          axis.text.y=element_text(size=12),\n          legend.title=element_text(size=0),\n          legend.text=element_text(size=13.5),\n          panel.grid.major = element_blank(), \n          panel.grid.minor = element_blank(),\n          panel.background=element_rect(fill='white', colour='black'),\n          strip.background = element_rect(colour=\"white\", fill=\"white\"),\n          panel.margin.x = grid::unit(.25, \"cm\"),\n          legend.position = 'top'\n        )\n    } %T>% {\n      ggsave(plot = ., filename = p0(data.out, \"plots/counterfactual.pdf\"), width=9, height=12)\n    } %>% {\n      ggsave(plot = ., filename = p0(data.out, \"pres/counterfactual.png\"), width=10, height=7)\n    }\n}\n\nplotTimes <- function() {\n  le('experiments.rds') %>% \n    fl(variable == 'time') %>% \n    mt(\n      newtonless = str_sub(estimator, 1, 2) == 'NN',\n      rust = str_detect(estimator, 'X'),\n      value = value / 60,\n      dirichlet.alpha = setLevels(\n        dirichlet.alpha, \n        c(0.01, 1),\n        c('Sparse Matrix', 'Dense Matrix')\n      ),\n      num.actions = setLevels(\n        num.actions, \n        c(2, 6),\n        c('Two Actions', 'Six Actions')\n      ),\n      rust = setLevels(\n        rust,\n        c(TRUE, FALSE),\n        c('NFXP', 'NPL')\n      ),\n      newtonless = setLevels(\n        newtonless,\n        c(FALSE, TRUE),\n        c('Without Strong Convergence', 'With Strong Convergence')\n      )\n    ) %>% \n    gb(rust, newtonless) %>%\n    mt(value = wins(value, c(0, .99))) %>% {\n      ggplot(\n        data = ., \n        aes(x = num.states, y = value, colour = newtonless)\n      ) + \n        geom_point(size = .75) +\n        geom_smooth(size = .75, se = FALSE) +\n        geom_hline(yintercept = 0, colour = 'black', size = .25) +\n        facet_grid(rust ~ num.actions + dirichlet.alpha, scale = 'free_y') +\n        labs(\n          x = 'Number of States',\n          y = 'Number of Minutes'\n        ) +\n        scale_colour_grey(start = .7, end = 0) +\n        theme(\n          strip.text.x=element_text(size=13.5),\n          strip.text.y=element_text(size=13.5),\n          axis.title.x=element_text(size=15),\n          axis.title.y=element_text(size=15),\n          axis.text.x=element_text(size=11),\n          axis.text.y=element_text(size=11),\n          legend.title=element_text(size=0),\n          legend.text=element_text(size=13.5),\n          panel.grid.major = element_blank(), \n          panel.grid.minor = element_blank(),\n          panel.background=element_rect(fill='white', colour='black'),\n          strip.background = element_rect(colour=\"white\", fill=\"white\"),\n          panel.margin.x = grid::unit(.5, \"cm\"),\n          legend.position = 'top'\n        )\n    } %T>% {\n      ggsave(plot = ., filename = p0(data.out, \"plots/times.pdf\"), width=9.5, height=10)\n    }  %>%\n    ggsave(plot = ., filename = p0(data.out, \"pres/times.png\"), width=10, height=7)\n}\n\nplotTimeRatio <- function(variables) {\n  le('experiments.rds') %>%\n    fl(variable == 'time') %>% \n    mt(\n      newtonless = str_sub(estimator, 1, 2) == 'NN',\n      rust = str_detect(estimator, 'X'),\n      num.states = pmin(max(num.states - 1), num.states),\n      num.states = num.states - num.states %% 200,\n      dirichlet.alpha = setLevels(\n        dirichlet.alpha, \n        c(0.01, 1),\n        c('Sparse Transition Matrix', 'Dense Transition Matrix')\n      ),\n      num.actions = setLevels(\n        num.actions, \n        c(2, 6),\n        c('Two Actions', 'Six Actions')\n      ),\n      rust = setLevels(\n        rust,\n        c(TRUE, FALSE),\n        c('NFXP', 'NPL')\n      )\n    ) %>%\n    gb(rust, newtonless, dirichlet.alpha, num.actions, num.states) %>%\n    sm(value = mean(value)) %>% \n    dc(... ~ newtonless, value.var = 'value') %>% \n    mt(ratio = `TRUE`/`FALSE`) %>%  \n    na.omit  %>% {\n      ggplot(\n        data = ., \n        aes(\n          x = num.states, \n          y = ratio\n        )\n      ) + \n        geom_point(size = 1) +\n        geom_line(size = .75) +\n        labs(\n          x = 'Number of States',\n          y = 'Ratio of Mean Times'\n        ) +\n        facet_grid(dirichlet.alpha + num.actions ~ rust, scales = 'free_x') +\n        scale_colour_grey(start = 0, end = .7) +\n        scale_y_log10() +\n        theme(\n          strip.text.x=element_text(size=14),\n          strip.text.y=element_text(size=14),\n          axis.title.x=element_text(size=15),\n          axis.title.y=element_text(size=15),\n          axis.text.x=element_text(size=12),\n          axis.text.y=element_text(size=14),\n          legend.title=element_text(size=0),\n          legend.text=element_text(size=15),\n          panel.grid.major = element_line(colour = \"grey95\"), \n          panel.grid.minor = element_blank(),\n          panel.background=element_rect(fill='white', colour='black'),\n          strip.background = element_rect(colour=\"white\", fill=\"white\"),\n          panel.margin.x = grid::unit(.5, \"cm\"),\n          legend.position = 'top'\n        )\n    } %>%\n    ggsave(plot = ., filename = p0(data.out, \"plots/ratio.pdf\"),  dpi=300, width=8.5, height=10)\n}\n\nplotRustExample <- function() {\n  num.actions <- 2\n  num.theta <- 1\n  dirichlet.alpha <- 1\n  num.states <- 12\n  lambda <- 1\n  iter.stop.threshold <- 10^-10\n  theta <- c(1, 10)\n  \n  dp <- \n    DPEngine$new(\n      num.states = num.states, \n      num.actions = num.actions, \n      num.theta = num.theta,\n      dirichlet.alpha = dirichlet.alpha\n    ) %T>% {\n      .$initializeDP()\n    }\n  \n  dp$tran$tran.mat <- \n    list(\n      cbind(\n        rep(0, num.states - 1),\n        diag(num.states - 1)\n      ) %>%\n        rbind(c(rep(0, num.states - 1), 1)),\n      cbind(\n        rep(1, num.states), \n        matrix(rep(0, num.states^2 - num.states), num.states)\n      )\n    )\n  \n  dp$payoff$payoff.stat <-\n    list(\n      -matrix(theta[1] * seq(num.states)),\n      -matrix(theta[2] * rep(1, num.states))\n    )\n  \n  dp$payoff$updatePayoffs(1)\n  \n  c(.9, .99, .999, .9999) %>%\n    ld(function(my.beta){\n      dp$beta <- my.beta\n      dp$resetSystem()\n      delta.value <- c()\n      delta.policy <- c()\n      delta.value.shape <- c()\n      delta <- 1\n      while(delta > iter.stop.threshold){\n        print(delta)\n        value.fn.prior <- dp$value.fn\n        CCP.prior <- dp$CCP[[1]]\n        dp$operator_VI()\n        delta <- max(abs(value.fn.prior - dp$value.fn))\n        delta.value <- c(delta.value, delta)\n        delta.value.shape <- c(delta.value.shape, max(abs(value.fn.prior - value.fn.prior[1] - dp$value.fn + dp$value.fn[1])))\n        delta.policy <- c(delta.policy, max(abs(CCP.prior - dp$CCP[[1]])))\n      } \n      \n      (dp$CCP[[1]]  * dp$tran$tran.mat[[1]] + dp$CCP[[2]]  * dp$tran$tran.mat[[2]]) %>%\n        eigen %>% {\n          .$values\n        } %>% \n        Mod %>% {\n          .[2]\n        } %>% {\n          print(c('eigenvalue:', .))\n        }\n      \n      cbind(\n        delta.value,\n        delta.value.shape,\n        delta.policy\n      ) %>% \n        ad %>% \n        slice(-1) %>%\n        mt(\n          Iteration = row_number(),\n          my.beta = my.beta\n        ) %>% \n        ml(c('Iteration', 'my.beta')) %>% \n        mt(\n          variable =\n            setLevels(\n              variable, \n              c('delta.policy', 'delta.value.shape', 'delta.value'),\n              c('Policy Function', 'Differenced Value Function', 'Value Function')\n            ),\n          my.beta = paste(expression('beta'), '==', my.beta)\n        ) %>%\n        fl(value > 10^-10)\n    }) %>% {\n      ggplot(\n        data = ., \n        aes(\n          x = Iteration, \n          y = value,\n          colour = variable\n        )\n      ) + \n        geom_line(size = 1) +\n        facet_wrap(\n          ~ my.beta,\n          labeller = label_parsed,\n          nrow = 2\n        ) +\n        labs(\n          x = 'Value Iteration Algorithm Step Number',\n          y = 'Function Change'\n        ) +\n        scale_colour_grey(start = .7, end = 0) +\n        scale_y_log10() +\n        scale_x_log10() +\n        theme(\n          strip.text.x=element_text(size=14),\n          strip.text.y=element_text(size=14),\n          axis.title.x=element_text(size=15),\n          axis.title.y=element_text(size=15),\n          axis.text.x=element_text(size=12),\n          axis.text.y=element_text(size=14),\n          legend.title=element_text(size=0),\n          legend.text=element_text(size=15),\n          panel.grid.major = element_line(colour = \"grey95\"), \n          panel.grid.minor = element_blank(),\n          panel.background=element_rect(fill='white', colour='black'),\n          strip.background = element_rect(colour=\"white\", fill=\"white\"),\n          panel.margin.x = grid::unit(.5, \"cm\"),\n          legend.position = 'top'\n        )\n    } %T>%\n    ggsave(plot = ., filename = p0(data.out, \"plots/rustModel.pdf\"),  dpi=300, width=9, height=6) %>% \n    ggsave(plot = ., filename = p0(data.out, \"pres/rustModel.png\"),  dpi=300, width=9, height=6)\n}\n\nplotRustExample2 <- function() {\n  library('expm')\n  \n  num.actions <- 2\n  num.theta <- 1\n  dirichlet.alpha <- 1\n  num.states <- 150\n  my.beta <- .999\n  lambda <- 1\n  iter.stop.threshold <- 10^-12\n  theta <- c(1, 10)\n  \n  dp <- \n    DPEngine$new(\n      num.states = num.states, \n      num.actions = num.actions, \n      num.theta = num.theta,\n      dirichlet.alpha = dirichlet.alpha,\n      beta = my.beta\n    ) %T>% {\n      .$initializeDP()\n    }\n  \n  dp$tran$tran.mat <- \n    list(\n      cbind(\n        rep(0, num.states - 1),\n        diag(num.states - 1)\n      ) %>%\n        rbind(c(rep(0, num.states - 1), 1)),\n      cbind(\n        rep(1, num.states), \n        matrix(rep(0, num.states^2 - num.states), num.states)\n      )\n    )\n  \n  dp$payoff$payoff.stat <-\n    list(\n      -matrix(theta[1] * seq(num.states)),\n      -matrix(theta[2] * rep(1, num.states))\n    )\n  \n  dp$payoff$updatePayoffs(1)\n  \n  #Solve policy (I can't use solve_DP_shape method, because it updates the payments)\n  delta <- 1\n  while(delta > iter.stop.threshold){\n    value.fn.prior <- dp$value.fn\n    dp$operator_VI(use.val.shape = TRUE)\n    delta <- max(abs(value.fn.prior - dp$value.fn))\n  }\n  \n  tran.mat <-\n    map2(\n      dp$CCP,\n      dp$tran$tran.mat,\n      ~ .x * .y\n    ) %>%\n    Reduce('+', .)\n  \n  c(0, 2^(0:6)) %>%\n    map_df(~ \n             df(\n               state = seq(num.states),\n               time = .,\n               `New Engine` = (tran.mat %^% .)[1,],\n               `Used Engine` = (tran.mat %^% .)[3, ]\n             )\n    ) %>%\n    ml(c('state', 'time')) %>%\n    fl(state < 8) %>%\n    mt(\n      state = (state - 1) * 10^4,\n      time = setLevels(time, unique(time), c('t', p0('t + ', unique(time)[-1])))\n    ) %>% {\n      ggplot(\n        data = ., \n        aes(\n          x = state, \n          y = value\n        )\n      ) + \n        geom_bar(stat='identity') +\n        facet_grid(\n          time ~ variable\n        ) +\n        labs(\n          x = 'Engine Mileage',\n          y = 'Density'\n        ) +\n        scale_y_continuous(breaks = c(0, .5, 1)) +\n        theme(\n          strip.text.x=element_text(size=14),\n          strip.text.y=element_text(size=14),\n          axis.title.x=element_text(size=15),\n          axis.title.y=element_text(size=15),\n          axis.text.x=element_text(size=12),\n          axis.text.y=element_text(size=12),\n          legend.title=element_text(size=0),\n          legend.text=element_text(size=15),\n          panel.grid.major = element_line(colour = \"grey95\"), \n          panel.grid.minor = element_blank(),\n          panel.background=element_rect(fill='white', colour='black'),\n          strip.background = element_rect(colour=\"white\", fill=\"white\"),\n          panel.margin.y = grid::unit(.4, \"cm\"),\n          legend.position = 'top'\n        )\n    } %T>% {\n      ggsave(plot = ., filename = p0(data.out, \"plots/rustModel2.pdf\"),  dpi=300, width=7, height=9) \n    } %>% {\n      ggsave(plot = ., filename = p0(data.out, \"pres/rustModel2.png\"),  dpi=300, width=7, height=6.5) \n    }\n}\n\nplotRustExample3 <- function() {\n  library('gridExtra')\n  \n  num.actions <- 2\n  num.theta <- 1\n  dirichlet.alpha <- 1\n  num.states <- 12\n  lambda <- 1\n  iter.stop.threshold <- 10^-10\n  theta <- c(1, 10)\n  my.beta <- .999\n  \n  dp <- \n    DPEngine$new(\n      num.states = num.states, \n      num.actions = num.actions, \n      num.theta = num.theta,\n      dirichlet.alpha = dirichlet.alpha,\n      beta = my.beta\n    ) %T>% {\n      .$initializeDP()\n    }\n  \n  dp$tran$tran.mat <- \n    list(\n      cbind(\n        rep(0, num.states - 1),\n        diag(num.states - 1)\n      ) %>%\n        rbind(c(rep(0, num.states - 1), 1)),\n      cbind(\n        rep(1, num.states), \n        matrix(rep(0, num.states^2 - num.states), num.states)\n      )\n    )\n  \n  dp$payoff$payoff.stat <- \n    list(\n      -matrix(theta[1] * (seq(num.states) - 1)),\n      -matrix(theta[2] * rep(1, num.states))\n    )\n  \n  dp$payoff$updatePayoffs(1)\n  \n  dp$value.fn <- rnorm(num.states, 0, sd = 1)\n  \n  df(\n    iteration = c(0, 2^(seq(0, 6))),\n    num.to.do = iteration - lag(iteration, default = 0)\n  ) %>%\n    dd('iteration', function(s){\n      iter.num <- 0\n      \n      while(s$num.to.do > iter.num){\n        dp$operator_VI()\n        iter.num <- iter.num + 1\n      } \n      \n      df(value.fn = -dp$value.fn) %>%\n        mt(state = 10000 * (row_number() - 1))\n    }) %>% \n    mt(\n      iteration = as.factor(iteration),\n      iteration = setLevels(\n        iteration,\n        levels(iteration),\n        paste('Iteration', levels(iteration))\n      )\n    ) %>%\n    fl(state <= 100000) %>% {\n    ggplot(\n      data = ., \n        aes(\n          x = state, \n          y = value.fn\n        )\n      ) + \n        geom_line(size = 1) +\n        facet_wrap(\n          ~ iteration,\n          nrow = 2,\n          scales = 'free_y'\n        ) +\n        labs(\n          x = 'Engine Mileage',\n          y = 'Expected Discounted Cost'\n        ) +\n        scale_colour_grey(start = 0, end = .8) +\n        scale_x_continuous(breaks = c(25000, 75000)) + \n        theme(\n          strip.text.x=element_text(size=14),\n          axis.title.x=element_text(size=15),\n          axis.title.y=element_text(size=15),\n          axis.text.x=element_text(size=12),\n          axis.text.y=element_text(size=12),\n          legend.title=element_text(size=0),\n          legend.text=element_text(size=15),\n          panel.grid.major = element_line(colour = \"grey95\"), \n          panel.grid.minor = element_blank(),\n          panel.background=element_rect(fill='white', colour='black'),\n          strip.background = element_rect(colour=\"white\", fill=\"white\"),\n          panel.margin.x = grid::unit(.5, \"cm\"),\n          legend.position = 'top'\n        )\n    } %T>% \n    ggsave(\n      plot = ., \n      filename = p0(data.out, \"plots/rustModel3.pdf\"),\n      width=9,\n      height=6\n    ) %>%\n    ggsave(\n      plot = .,\n      filename = p0(data.out, \"pres/rustModel3.png\"),\n      dpi=300,\n      width=8, \n      height=5\n    )\n    }",
    "created" : 1460765817390.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "0|34|24|0|\n26|25|69|0|\n71|35|114|0|\n116|38|155|0|\n349|31|481|0|\n483|32|595|0|\n597|32|715|4|\n",
    "hash" : "1837600587",
    "id" : "D16C5B25",
    "lastKnownWriteTime" : 1465841521,
    "last_content_update" : 1465841522917,
    "path" : "~/Dropbox/code/victor/code/modules/BasicOutputs.R",
    "project_path" : "modules/BasicOutputs.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}